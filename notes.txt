Backend Services & API Internship Assignment
Hey! Here is your assignment üòé
Your task is to create a simple Bitcoin Wallet REST API based on a simplified
Bitcoin transaction model.

Domain Requirements
The API should have the following endpoints:
‚óè List all transactions
‚óè Show the current balance in BTC and EUR (balance is the sum of unspent
transactions)
‚óè Create a new money transfer/spending from your unspent transactions by
providing the amount in EUR
A transaction has the following structure:
Transaction ID - A random unique hexadecimal string
Amount - Amount in BTC
Spent - Whether this transaction has been used in a money transfer
Created At - The timestamp when this transaction was created
There is no requirement to create a separate endpoint for adding new unspent
transactions, you are free to enter this data manually if you wish.
Transfer rules:
To complete a transfer, you should take unspent transactions from your database to
cover the transfer amount specified in the request. In case there is not enough BTC
in unspent transactions or if the transfer amount is smaller than 0.00001 BTC, then
the API should reject the request. Unspent transactions used in the transfer should
be marked as spent and any leftover amount should be transferred to a new unspent
transaction.

Example 1: There are two unspent transactions, one for 3 BTC and the other for 2
BTC. After currency conversion the transfer amount will be 4.5 BTC. Both of the
unspent transactions have to be marked as spent, since a single one is not enough to
cover the full amount. There is also a leftover amount (3 + 2 - 4.5 = 0.5), so a new
unspent transaction has to be created for 0.5 BTC.
Example 2: There is one unspent transaction for 3 BTC and the transfer amount is 4
BTC - the API should reject this request because there is not enough balance.
Exchange rate:
Exchange rate for EUR to BTC can be fetched from this API:
http://api-cryptopia.adca.sh/docs by using the
http://api-cryptopia.adca.sh/v1/prices/ticker endpoint.
Technical Requirements
‚óè Use either Python, PHP, Go programming language
‚óè You have total control over frameworks, tools, and libraries
‚óè The app data should be stored in MySQL, PostgreSQL or SQLite database;
‚óè Upload your solution in a version control system like GitHub, Gitlab, or
BitBucket, including a short ReadMe about how to run the application;
Evaluation Criteria

‚óè Conformance to business requirements
‚óè Code quality (we value good OO design)
‚óè Tests are not required, but show us if you are good at it :)
‚óè Checkout-and-run app convenience (how easy it is to run and deploy the
service)

Actively Idle,
Backend Services & API Team ‚úå
